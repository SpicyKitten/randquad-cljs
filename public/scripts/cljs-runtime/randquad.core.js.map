{"version":3,"sources":["randquad/core.cljs"],"mappings":"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","names":["randquad.core/style","randquad.core/randnum","n","adjust","random-number","cljs.core/rand-int","adjusted-number","randquad.core/hide-one","cljs.core._EQ_","randquad.core/format-ve","first?","cljs.core/abs","randquad.core/neg","randquad.core/fmt-first","cljs.core.comp","cljs.core.partial","randquad.core/fmt","randquad.core/genquad","js/alert","-a","-b","-c","a","b","c","goog.string/format","cljs.core/deref","p1__14081#","randquad.core/input-box","value","cljs.core/reset!","randquad.core/validate-input","s","root","processed","clojure.string/replace","matches","p1__14082#","cljs.core.map","js/parseInt","cljs.core/re-seq","flipped","ans","cljs.core/first","cljs.core/second","randquad.core/submit","input","msg","visibility","cljs.core.println","randquad.core/regen","quad","randquad.core/indicator","text","randquad.core/main-component","reagent.core.atom","quad-mut","randquad.core/run","reagent.dom.render","js/document.getElementById"],"sourcesContent":["(ns randquad.core\n  (:require\n    [clojure.string :as cs]\n    [goog.string :as gstring]\n    [goog.string.format]\n    [reagent.core :as r]\n    [reagent.dom :as rdom]))\n\n\n(def style\n  {:style\n   {:position :fixed\n    :top \"50%\"\n    :left \"50%\"\n    :text-align \"center\"\n    :transform \"translate(-50%, -50%)\"}})\n\n\n(defn randnum\n  [n adjust]\n  (let [random-number (rand-int n)\n        adjusted-number (- random-number adjust)]\n    (if (zero? adjusted-number)\n      (recur n adjust)\n      adjusted-number)))\n\n\n(defn hide-one\n  \"if n = 1 returns empty string, \n  otherwise return n as string\"\n  [n]\n  (if (= n 1)\n    \"\"\n    (str n)))\n\n\n(defn format-ve\n  \"if n is negetive format n into string, \n  if n is possitive format n into string and add + sign\"\n  [first? n]\n  (if (pos? n)\n    (if first?\n      (str n)\n      (str \"+ \" n))\n    (str \"- \" (abs n))))\n\n\n(defn neg\n  \"the\"\n  [n]\n  (* n -1))\n\n\n(def fmt-first\n  (comp (partial format-ve true)\n        hide-one))\n\n\n(def fmt\n  (comp (partial format-ve false)\n        hide-one))\n\n\n(defn genquad\n  \"generates random quad equation while updating the answer storage\"\n  []\n  (js/alert \"genquad ran\")\n  (let [-a (randnum 19 9)\n        -b (randnum 19 9)\n        -c (randnum 11 5)\n        a -c\n        b (* -c (+ -a -b))\n        c (* -a -b -c)]\n    [(gstring/format\n       \"%sx^2  %sx  %s\"\n       (fmt-first a)\n       (fmt b)\n       (fmt c))\n     {:a (neg -a)\n      :b (neg -b)}]))\n\n\n(defn input-box\n  [value]\n  [:input\n   {:type \"text\"\n    :value @value\n    :on-change\n    #(reset!\n       value\n       (-> %\n           .-target\n           .-value))}])\n\n\n(defn validate-input\n  [s root]\n  (let [processed (cs/replace s #\" \" \"\")\n        matches (map #(js/parseInt %)\n                     (re-seq #\"-?\\d+\" processed))\n        flipped (map neg matches)\n        ans @root\n        a (first flipped)\n        b (second flipped)]\n    (or (and (= (:a ans) a) (= (:b ans) b))\n        (and (= (:b ans) a) (= (:a ans) b)))))\n\n\n(defn submit\n  \"submit and validate input, rerender\"\n  [input root msg visibility]\n  (if (validate-input @input root)\n    (do (reset! msg \"correct answer\")\n        (reset! visibility \"block\"))\n    (let [ans @root\n          a (:a ans)\n          b (:b ans)]\n      (println a b)\n      (reset!\n        msg\n        (gstring/format \"incorrect answer, roots are (%s, %s)\"\n                        a b)))))\n\n\n(defn regen\n  \"regenerate quad equation\"\n  [root quad msg visibility]\n  (js/alert \"regen\")\n  (reset! quad (genquad))\n  (reset! root (second quad))\n  (reset! msg \"\")\n  (reset! visibility \"hidden\"))\n\n\n(defn indicator\n  [text]\n  [:p @text])\n\n\n(defn main-component\n  []\n  (let [quad (genquad)\n        root (r/atom (second quad))\n        quad-mut (r/atom (first quad))\n        input (r/atom \"\")\n        msg (r/atom \"\")\n        visibility (r/atom \"none\")]\n    [:div style\n     [:div\n      [:p\n       {:style {:font-size \"200%\"}}\n       @quad-mut]\n      [:div\n       [input-box input]\n       [:button {:on-click #(submit input root msg visibility)}\n        \"submit\"]\n       [indicator msg]]\n      [:div {:style {:display @visibility}}\n       [:button {:on-click #(regen root quad-mut msg visibility)}\n        \"next\"]]]]))\n\n\n(defn ^:export run\n  []\n  (rdom/render\n    [#'main-component]\n    (js/document.getElementById \"app\")))\n"]}